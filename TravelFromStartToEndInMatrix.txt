//Find number of ways to travel path from start to end in  a mXn matrix.
public class Travel {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int m = Integer.parseInt(reader.readLine());
        int n = Integer.parseInt(reader.readLine());
        System.out.print("Travel by normal recursion:");
        int ans = travelRecursion(m,n);
        System.out.println(ans);
        System.out.println("Time Complexity: O(2^(m+n)) Space complexity: O(m+n)");
        System.out.print("Travel by DP:");
        HashMap<String,Integer> hm = new HashMap<>();
        ans = travelDynamic(m,n,hm);
        System.out.println(ans);
        System.out.println("Time Complexity: O(m*n) Space complexity: O(m+n)");
        }

    private static int travelRecursion(int m,int n) {
        if(m==1 && n==1) return 1;
        else if(m==0 || n==0) return 0;
        else return(travelRecursion(m-1,n)+travelRecursion(m,n-1));
    }

    static int travelDynamic(int m, int n, HashMap<String,Integer> hm){
        if(hm.containsKey(m+","+n)){return hm.get(m+","+n);}
        if(m==1 && n==1) return 1;
        else if(m==0 || n==0) return 0;
        else hm.put(m+","+n, travelDynamic(m-1,n, hm)+ travelDynamic(m,n-1,hm));
        return hm.get(m+","+n);
        }

}
